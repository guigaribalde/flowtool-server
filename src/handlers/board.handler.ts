import { Socket, Server } from 'socket.io';
import jwt from 'jsonwebtoken';
import { User } from '@prisma/client';
import { throws } from 'assert';
import { ObjectId } from 'bson';
import prisma from '../../prisma/prisma';
import Sessions from '../sessionizer';
import auth from '../auth';

interface HandlerProps {
	io: Server;
	socket: Socket;
	sessions: Sessions;
}

type TBoard =
	| ({
			columns: TColumn[];
	  } & {
			id: string;
			name: string;
			spaceId: string | null;
	  })
	| undefined;

type TColumn = {
	id: string;
	name: string;
	index: number;
	boardId: string | null;
	tasks: {
		id: string;
		name: string;
		index: number;
		columnId: string | null;
	}[];
};

export type CreateColumnPayload = {
	id: string;
	name: string;
	index: number;
	tasks: any[];
	spaceId: string;
};

export default function boardHandler({ socket, sessions }: HandlerProps) {
	socket.on(
		'create:column',
		async ({ id, name, index, tasks, spaceId }: CreateColumnPayload) => {
			const verify = auth(socket);
			if (!verify) return;

			const result = await prisma.$transaction(async (db) => {
				const workspace = await prisma.workSpace.findFirst({
					where: {
						Space: {
							some: {
								id: spaceId,
							},
						},
					},
					include: {
						Space: {
							where: {
								id: spaceId,
							},
							include: {
								boards: true,
							},
						},
						UserOnWorkSpace: {
							where: {
								user: {
									clerkId: verify.sub as string,
								},
							},
							include: {
								user: true,
							},
						},
					},
				});

				if (!workspace?.UserOnWorkSpace?.length || !workspace?.Space?.length) {
					throw new Error('User not found');
				}

				const boardId = workspace.Space[0]?.boards?.length
					? workspace.Space[0].boards[0].id
					: undefined;

				const randomId = new ObjectId().toString();
				const column = await prisma.column.create({
					data: {
						name,
						index,
						id,
						tasks: {},
						Board: {
							connectOrCreate: {
								where: {
									id: boardId || randomId,
								},
								create: {
									name: 'AUTOGENERATED_BOARD',
									Space: {
										connect: {
											id: spaceId,
										},
									},
								},
							},
						},
					},
				});

				if (!column) throw new Error('Unable to create column');

				return column;
			});

			console.log(result);

			// TODO: Stopped here
			socket.broadcast.to(spaceId).emit('create:column', result);
		},
	);
}
